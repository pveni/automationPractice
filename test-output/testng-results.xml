<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="18" passed="17">
  <reporter-output>
  </reporter-output>
  <suite name="Automation Practice Test Suite" duration-ms="157682" started-at="2018-02-08T00:15:04Z" finished-at="2018-02-08T00:17:42Z">
    <groups>
    </groups>
    <test name="Test Cases" duration-ms="157682" started-at="2018-02-08T00:15:04Z" finished-at="2018-02-08T00:17:42Z">
      <class name="tests.ViewOrdersTest">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.ViewOrdersTest@1cd072a9]" name="setup" is-config="true" duration-ms="21295" started-at="2018-02-08T00:16:14Z" finished-at="2018-02-08T00:16:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="testForPreviousOrders()[pri:0, instance:tests.ViewOrdersTest@1cd072a9]" name="testForPreviousOrders" duration-ms="13683" started-at="2018-02-08T00:16:35Z" finished-at="2018-02-08T00:16:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForPreviousOrders -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.ViewOrdersTest@1cd072a9]" name="tearDown" is-config="true" duration-ms="1905" started-at="2018-02-08T00:16:49Z" finished-at="2018-02-08T00:16:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testForPreviousOrders status=SUCCESS method=ViewOrdersTest.testForPreviousOrders()[pri:0, instance:tests.ViewOrdersTest@1cd072a9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="closeSetup()[pri:0, instance:tests.ViewOrdersTest@1cd072a9]" name="closeSetup" is-config="true" duration-ms="1" started-at="2018-02-08T00:16:51Z" finished-at="2018-02-08T00:16:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeSetup -->
      </class> <!-- tests.ViewOrdersTest -->
      <class name="tests.HappyPathTest">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.HappyPathTest@e580929]" name="setup" is-config="true" duration-ms="25676" started-at="2018-02-08T00:15:04Z" finished-at="2018-02-08T00:15:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="testForPurchasingTwoItems()[pri:0, instance:tests.HappyPathTest@e580929]" name="testForPurchasingTwoItems" duration-ms="41029" started-at="2018-02-08T00:15:30Z" finished-at="2018-02-08T00:16:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForPurchasingTwoItems -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.HappyPathTest@e580929]" name="tearDown" is-config="true" duration-ms="2895" started-at="2018-02-08T00:16:11Z" finished-at="2018-02-08T00:16:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testForPurchasingTwoItems status=SUCCESS method=HappyPathTest.testForPurchasingTwoItems()[pri:0, instance:tests.HappyPathTest@e580929] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="closeSetup()[pri:0, instance:tests.HappyPathTest@e580929]" name="closeSetup" is-config="true" duration-ms="0" started-at="2018-02-08T00:16:14Z" finished-at="2018-02-08T00:16:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeSetup -->
      </class> <!-- tests.HappyPathTest -->
      <class name="tests.CaptureImageTest">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.CaptureImageTest@7c75222b]" name="setup" is-config="true" duration-ms="20930" started-at="2018-02-08T00:16:51Z" finished-at="2018-02-08T00:17:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="testToCaptureFailedScreenshot()[pri:0, instance:tests.CaptureImageTest@7c75222b]" name="testToCaptureFailedScreenshot" duration-ms="8288" started-at="2018-02-08T00:17:12Z" finished-at="2018-02-08T00:17:20Z">
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[Order cannot be selected by date]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: Order cannot be selected by dateat Pages.OrderHistoryPage.selectOrderFromHistory(OrderHistoryPage.java:56)at tests.CaptureImageTest.testToCaptureFailedScreenshot(CaptureImageTest.java:39)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)at org.testng.internal.Invoker.invokeMethod(Invoker.java:571)at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:707)at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:979)at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)at org.testng.TestRunner.privateRun(TestRunner.java:648)at org.testng.TestRunner.run(TestRunner.java:505)at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)at org.testng.SuiteRunner.run(SuiteRunner.java:364)at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)at org.testng.TestNG.runSuites(TestNG.java:1028)at org.testng.TestNG.run(TestNG.java:996)at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72)at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123)]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToCaptureFailedScreenshot -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.CaptureImageTest@7c75222b]" name="tearDown" is-config="true" duration-ms="2654" started-at="2018-02-08T00:17:20Z" finished-at="2018-02-08T00:17:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testToCaptureFailedScreenshot status=FAILURE method=CaptureImageTest.testToCaptureFailedScreenshot()[pri:0, instance:tests.CaptureImageTest@7c75222b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="closeSetup()[pri:0, instance:tests.CaptureImageTest@7c75222b]" name="closeSetup" is-config="true" duration-ms="1" started-at="2018-02-08T00:17:23Z" finished-at="2018-02-08T00:17:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeSetup -->
      </class> <!-- tests.CaptureImageTest -->
      <class name="apitests.APICallsTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="setUp" is-config="true" duration-ms="1440" started-at="2018-02-08T00:17:23Z" finished-at="2018-02-08T00:17:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testForCreateUser()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForCreateUser" duration-ms="6313" started-at="2018-02-08T00:17:24Z" finished-at="2018-02-08T00:17:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForCreateUser -->
        <test-method status="PASS" signature="testForDelayedResponse()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForDelayedResponse" duration-ms="4215" started-at="2018-02-08T00:17:31Z" finished-at="2018-02-08T00:17:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForDelayedResponse -->
        <test-method status="PASS" signature="testForDeleteUser()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForDeleteUser" duration-ms="549" started-at="2018-02-08T00:17:35Z" finished-at="2018-02-08T00:17:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForDeleteUser -->
        <test-method status="PASS" signature="testForGetListOfResources()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForGetListOfResources" duration-ms="1031" started-at="2018-02-08T00:17:35Z" finished-at="2018-02-08T00:17:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForGetListOfResources -->
        <test-method status="PASS" signature="testForGetListOfUsers()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForGetListOfUsers" duration-ms="976" started-at="2018-02-08T00:17:36Z" finished-at="2018-02-08T00:17:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForGetListOfUsers -->
        <test-method status="PASS" signature="testForGetSingleResource()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForGetSingleResource" duration-ms="716" started-at="2018-02-08T00:17:37Z" finished-at="2018-02-08T00:17:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForGetSingleResource -->
        <test-method status="PASS" signature="testForGetSingleResourceNotFound()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForGetSingleResourceNotFound" duration-ms="432" started-at="2018-02-08T00:17:38Z" finished-at="2018-02-08T00:17:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForGetSingleResourceNotFound -->
        <test-method status="PASS" signature="testForGetSingleUser()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForGetSingleUser" duration-ms="513" started-at="2018-02-08T00:17:38Z" finished-at="2018-02-08T00:17:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForGetSingleUser -->
        <test-method status="PASS" signature="testForGetSingleUserNotFound()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForGetSingleUserNotFound" duration-ms="386" started-at="2018-02-08T00:17:39Z" finished-at="2018-02-08T00:17:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForGetSingleUserNotFound -->
        <test-method status="PASS" signature="testForLoginSuccessful()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForLoginSuccessful" duration-ms="398" started-at="2018-02-08T00:17:39Z" finished-at="2018-02-08T00:17:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForLoginSuccessful -->
        <test-method status="PASS" signature="testForLoginUnSuccessful()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForLoginUnSuccessful" duration-ms="377" started-at="2018-02-08T00:17:40Z" finished-at="2018-02-08T00:17:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForLoginUnSuccessful -->
        <test-method status="PASS" signature="testForRegisterSuccessful()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForRegisterSuccessful" duration-ms="415" started-at="2018-02-08T00:17:40Z" finished-at="2018-02-08T00:17:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForRegisterSuccessful -->
        <test-method status="PASS" signature="testForRegisterUnSuccessful()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForRegisterUnSuccessful" duration-ms="376" started-at="2018-02-08T00:17:41Z" finished-at="2018-02-08T00:17:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForRegisterUnSuccessful -->
        <test-method status="PASS" signature="testForUpdateUserUsingPatch()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForUpdateUserUsingPatch" duration-ms="495" started-at="2018-02-08T00:17:41Z" finished-at="2018-02-08T00:17:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForUpdateUserUsingPatch -->
        <test-method status="PASS" signature="testForUpdateUserUsingPut()[pri:0, instance:apitests.APICallsTest@4c203ea1]" name="testForUpdateUserUsingPut" duration-ms="519" started-at="2018-02-08T00:17:41Z" finished-at="2018-02-08T00:17:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testForUpdateUserUsingPut -->
      </class> <!-- apitests.APICallsTest -->
    </test> <!-- Test Cases -->
  </suite> <!-- Automation Practice Test Suite -->
</testng-results>
